{"version":3,"sources":["infrastructure/Firebase.ts","pages/Home.tsx","pages/SignUp.tsx","utils/Auth.js","pages/Login.tsx","utils/PrivateRoute.js","pages/Posts.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Firebase","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Home","onClick","auth","signOut","withRouter","props","handleSubmit","useCallback","ev","a","preventDefault","target","elements","email","password","console","log","createUserWithEmailAndPassword","value","alert","history","push","onSubmit","name","type","to","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","useEffect","onAuthStateChanged","Provider","Login","signInWithEmailAndPassword","cont","useContext","PrivateRoute","RouteComponent","component","rest","render","routeProps","Post","db","text","post","user","uid","set","state","posts","database","ref","child","this","on","snap","postsId","key","val","setState","map","p","k","Component","App","exact","path","SignUp","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.292abca3.chunk.js","sourcesContent":["import * as firebase from 'firebase/app'\nimport \"firebase/auth\"\nimport \"firebase/database\"\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCiWX7XS7bywENkJKxyzKa9BkKTWV3Xsic\",\n    authDomain: \"prueba-hindra.firebaseapp.com\",\n    databaseURL: \"https://prueba-hindra.firebaseio.com\",\n    projectId: \"prueba-hindra\",\n    storageBucket: \"prueba-hindra.appspot.com\",\n    messagingSenderId: \"833531295878\",\n    appId: \"1:833531295878:web:2dcfccd0488e09bec2b907\"\n};\n\nconst Firebase = firebase.initializeApp(firebaseConfig)\nexport default Firebase","import React from 'react'\nimport Firebase from '../infrastructure/Firebase'\n\n\nconst Home = () => {\n    return (\n        <div>\n            <h1>Home</h1>\n            <button onClick={() => { Firebase.auth().signOut() }}>Salir</button>\n        </div>\n\n    )\n}\n\nexport default Home","import React, { useCallback } from 'react'\nimport { withRouter } from 'react-router'\nimport Firebase from '../infrastructure/Firebase';\nimport { Link } from 'react-router-dom';\n\nconst SignUp = (props:any) => {\n    const handleSubmit = useCallback(async ev => {\n        ev.preventDefault();\n        const { email, password } = ev.target.elements;\n        console.log(email, password)\n        try {\n            await Firebase.auth().createUserWithEmailAndPassword(email.value, password.value)\n            alert(`Se creó el usuario  ${email.value}`);\n            props.history.push(\"/login\")\n        } catch (err) {\n            alert(err)\n        }\n    }, [props.history])\n\n    return (\n        <div>\n            <h1>Registar Usuario</h1>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Usuario o Correo:\n                    <input name=\"email\" type=\"text\" />\n                </label>\n                <br />\n                <label>\n                    Contraseña:\n                    <input name=\"password\" type=\"password\" />\n                </label>\n\n                <br />\n                <button type=\"submit\">\n                    Enviar\n                </button>\n                <Link to=\"/login\">\n                    Ingresar\n                </Link>\n            </form>\n\n        </div>\n\n    )\n}\n\nexport default withRouter(SignUp)","import React, { useState, useEffect } from 'react'\nimport Firebase from '../infrastructure/Firebase'\n\nexport const AuthContext = React.createContext({});\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState(null)\n    useEffect(() => {\n        Firebase.auth().onAuthStateChanged(setCurrentUser);\n    }, [])\n\n    return (<AuthContext.Provider\n        value={{ currentUser }\n        }>\n        {children}\n    </AuthContext.Provider>)\n\n}","import React, { useCallback, useContext } from 'react'\nimport Firebase from '../infrastructure/Firebase';\nimport { AuthContext } from '../utils/Auth';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nconst Login = (props: any) => {\n    const handleSubmit = useCallback(async ev => {\n        ev.preventDefault();\n        const { email, password } = ev.target.elements\n\n        try {\n            await Firebase.auth().signInWithEmailAndPassword(email.value, password.value)\n\n            props.history.push(\"/posts\")\n        } catch (err) {\n            alert(err)\n        }\n\n    }, [props.history])\n\n    const cont = useContext(AuthContext) as any\n    console.log(cont.currentUser)\n    if (cont.currentUser) {\n        return <Redirect to=\"/posts\" />\n    }\n\n    return (\n        <div>\n            <h1>Ingreso</h1>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Usuario:\n                    <input name=\"email\" type=\"text\" />\n                </label>\n                <br />\n                <label>\n                    Contraseña:\n                    <input name=\"password\" type=\"password\" />\n                </label>\n\n                <br />\n                <button type=\"submit\">\n                    Ingresar\n                </button>\n                <Link to=\"/signup\" >\n                    Registrarse\n                    </Link>\n            </form>\n\n        </div>\n    )\n}\n\nexport default Login","import React, { useContext } from \"react\"\nimport { AuthContext } from \"./Auth\"\nimport { Route, Redirect } from \"react-router-dom\"\n\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\n    const { currentUser } = useContext(AuthContext)\n\n    return <Route\n        {...rest}\n        render={routeProps => !!currentUser\n            ? (<RouteComponent {...routeProps} />)\n            : <Redirect to=\"/login\" />} />\n\n}\n\nexport default PrivateRoute","import React, { Component, useCallback } from 'react'\nimport Firebase from '../infrastructure/Firebase'\n\n\nclass Post extends Component<any, any> {\n    db: any = null;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            posts: []\n        }\n        this.db = Firebase.database().ref().child('Post');\n    }\n    async componentDidMount() {\n        const posts = this.state.posts\n        this.db.on('child_added', (snap: any) => {\n            posts.push({\n                postsId: snap.key,\n                name: snap.val().name,\n                text: snap.val().text\n            })\n            this.setState({ posts })\n        })\n    }\n    handleSubmit = async (ev: any) => {\n        ev.preventDefault();\n        const { name, text } = ev.target.elements;\n        try {\n            const post = {\n                text: text.value,\n                name: name.value,\n                user: Firebase.auth().currentUser?.uid || \"\"\n            };\n            await this.db.push().set(post)\n        } catch (err) {\n            alert(err)\n        }\n    }\n\n    render() {\n\n\n        return (\n            <div>\n                <h1>Post</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Nombre:\n                    <input name=\"name\" type=\"text\" />\n                    </label>\n                    <br />\n                    <label>\n                        Contenido:\n                    <input name=\"text\" type=\"text\" />\n                    </label>\n\n                    <br />\n                    <button type=\"submit\">\n                        Publicar\n                </button>\n                </form>\n\n                <br />\n                <ul>\n                    {this.state.posts.map((p: any, k: number) => \n                    <li key={k}><b>{p.name}:</b> - {p.text} - {p.user}</li>)}\n                </ul>\n                <button onClick={() => { Firebase.auth().signOut() }}>Salir</button>\n            </div>\n\n        )\n    }\n}\n\nexport default Post","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport SignUp from './pages/SignUp';\nimport Login from './pages/Login';\nimport { AuthProvider } from './utils/Auth';\nimport PrivateRoute from './utils/PrivateRoute';\nimport Post from './pages/Posts';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/signup\" component={SignUp} />\n        <PrivateRoute exact path=\"/posts\" component={Post} />\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}