{"version":3,"sources":["infrastructure/Firebase.ts","pages/Home.tsx","pages/SignUp.tsx","utils/Auth.js","ui/partials/AppTemplate.tsx","pages/Login.tsx","pages/Posts.tsx","utils/PrivateRoute.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Firebase","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Home","onClick","auth","signOut","withRouter","props","handleSubmit","useCallback","ev","a","preventDefault","target","elements","email","password","console","log","createUserWithEmailAndPassword","value","alert","history","push","onSubmit","name","type","to","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","useEffect","onAuthStateChanged","Provider","AppTemplate","alertProps","Header","Title","style","color","title","Content","Footer","textAlign","show","message","showIcon","Login","setAlertProps","formData","signInWithEmailAndPassword","then","resp","catch","err","useContext","span","offset","className","initialValues","rememberMe","onFinish","Item","rules","required","placeholder","prefix","UserOutlined","LockOutlined","valuePropName","htmlType","Post","db","post","user","uid","set","setState","state","posts","database","ref","child","this","on","snap","postsId","key","val","text","gutter","itemLayout","dataSource","renderItem","Meta","avatar","src","description","Component","PrivateRoute","RouteComponent","component","rest","render","routeProps","App","exact","path","SignUp","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"8RAeeA,G,cADEC,gBAVM,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,+CCGIC,EAVF,WACT,OACI,6BACI,oCACA,4BAAQC,QAAS,WAAQV,EAASW,OAAOC,YAAzC,W,yBCuCGC,eA1CA,SAACC,GACZ,IAAMC,EAAeC,sBAAW,uCAAC,WAAMC,GAAN,mBAAAC,EAAA,6DAC7BD,EAAGE,iBAD0B,EAEDF,EAAGG,OAAOC,SAA9BC,EAFqB,EAErBA,MAAOC,EAFc,EAEdA,SACfC,QAAQC,IAAIH,EAAOC,GAHU,kBAKnBvB,EAASW,OAAOe,+BAA+BJ,EAAMK,MAAOJ,EAASI,OALlD,OAMzBC,MAAM,0BAAD,OAAwBN,EAAMK,QACnCb,EAAMe,QAAQC,KAAK,UAPM,kDASzBF,MAAM,EAAD,IAToB,0DAAD,sDAW7B,CAACd,EAAMe,UAEV,OACI,6BACI,gDACA,0BAAME,SAAUhB,GACZ,mDAEI,2BAAOiB,KAAK,QAAQC,KAAK,UAE7B,6BACA,gDAEI,2BAAOD,KAAK,WAAWC,KAAK,cAGhC,6BACA,4BAAQA,KAAK,UAAb,UAGA,kBAAC,IAAD,CAAMC,GAAG,UAAT,iB,SClCHC,EAAcC,IAAMC,cAAc,IAElCC,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACJC,mBAAS,MADL,mBACnCC,EADmC,KACtBC,EADsB,KAM1C,OAJAC,qBAAU,WACN3C,EAASW,OAAOiC,mBAAmBF,KACpC,IAEK,kBAACP,EAAYU,SAAb,CACJlB,MAAO,CAAEc,gBAERF,I,0GCUMO,EArBK,SAAChC,GAAgB,IAC1BiC,EAAcjC,EAAdiC,WAEP,OAAQ,kBAAC,IAAD,KACJ,kBAAC,IAAOC,OAAR,KACI,kBAAC,IAAWC,MAAZ,CAAkBC,MAAO,CAAEC,MAAO,UAC7BrC,EAAMsC,OAAS,gBAGxB,kBAAC,IAAOC,QAAR,KACI,6BACCvC,EAAMyB,UAAY,WAEvB,kBAAC,IAAOe,OAAR,CAAeJ,MAAO,CAACK,UAAU,WAAjC,sBAGCR,EAAWS,KAAO,kBAAC,IAAD,CAAOvB,KAAMc,EAAWd,KAAOwB,QAASV,EAAWU,QAASC,UAAQ,IAAG,OCkEnFC,EA1ED,SAAC7C,GAAgB,IAAD,EACU0B,mBAAS,CAAEP,KAAM,OAAQwB,QAAS,GAAID,MAAM,IADtD,mBACnBT,EADmB,KACPa,EADO,KAGpB7C,EAAeC,uBAAY,SAAA6C,GAC7B7D,EAASW,OAAOmD,2BAA2BD,EAASvC,MAAOuC,EAAStC,UACnEwC,MAAK,SAAAC,GACEA,IACAJ,EAAc,CACVJ,MAAK,EACLC,QAAQ,gBACRxB,KAAK,YAETnB,EAAMe,QAAQC,KAAK,cAExBmC,OAAM,SAAAC,GACLN,EAAc,CACVJ,MAAK,EACLC,QAAQS,EAAIT,QACZxB,KAAK,eAGd,CAACnB,EAAMe,UAKV,OAHasC,qBAAWhC,GAGfM,YACE,kBAAC,IAAD,CAAUP,GAAG,WAKpB,kBAAC,EAAD,CAAaa,WAAYA,GACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKqB,KAAM,GAAIC,OAAQ,GACnB,kBAAC,IAAD,CAAMjB,MAAM,UAAUF,MAAO,CAAEK,UAAW,WAEtC,kBAAC,IAAD,CAAMvB,KAAK,QACPsC,UAAU,aACVC,cAAe,CAAEC,YAAY,GAC7BC,SAAU1D,GACV,kBAAC,IAAK2D,KAAN,CAAW1C,KAAK,QAAQ2C,MAAO,CAAC,CAAEC,UAAU,EAAMnB,QAAS,iCACvD,kBAAC,IAAD,CAAOoB,YAAY,QACfC,OAAQ,kBAACC,EAAA,EAAD,CAAcT,UAAU,2BAIxC,kBAAC,IAAKI,KAAN,CAAW1C,KAAK,WAAW2C,MAAO,CAAC,CAAEC,UAAU,EAAMnB,QAAS,uBAC1D,kBAAC,IAAD,CAAOoB,YAAY,QACfC,OAAQ,kBAACE,EAAA,EAAD,CAAcV,UAAU,wBAChCrC,KAAK,cAGb,kBAAC,IAAKyC,KAAN,CAAW1C,KAAK,WAAWiD,cAAc,WACrC,kBAAC,IAAD,qBAIJ,kBAAC,IAAKP,KAAN,KACI,kBAAC,IAAD,CAAQzC,KAAK,UAAUiD,SAAS,SAASZ,UAAU,qBAAnD,aACA,6BACA,kBAAC,IAAD,CAAMpC,GAAG,WAAT,sB,wECoCjBiD,E,YAnGX,WAAYrE,GAAa,IAAD,8BACpB,4CAAMA,KAHVsE,GAAU,KAEc,EAmBxBrE,aAAe,SAAC8C,GAAmB,IAAD,EACxBwB,EAAI,aACNC,MAAM,UAAAtF,EAASW,OAAO8B,mBAAhB,eAA6B8C,MAAO,IACvC1B,GAEP,EAAKuB,GAAGtD,OAAO0D,IAAIH,GAAMtB,MAAK,SAACC,GAC3B,EAAKyB,SAAS,CACV7D,MAAO,CACH4B,MAAM,EACNvB,KAAM,OACNwB,QAAS,mBAGlBQ,OAAM,SAACC,GACN,EAAKuB,SAAS,CACV7D,MAAO,CACH4B,MAAM,EACNvB,KAAM,QACNwB,QAASS,EAAIT,eAnCzB,EAAKiC,MAAQ,CACTC,MAAO,GACP/D,MAAO,CAAEK,KAAM,OAAQwB,QAAS,GAAID,MAAM,IAE9C,EAAK4B,GAAKpF,EAAS4F,WAAWC,MAAMC,MAAM,QANtB,E,wMASdH,EAAQI,KAAKL,MAAMC,MACzBI,KAAKX,GAAGY,GAAG,eAAe,SAACC,GACvBN,EAAM7D,KAAK,CACPoE,QAASD,EAAKE,IACdnE,KAAMiE,EAAKG,MAAMpE,KACjBqE,KAAMJ,EAAKG,MAAMC,OAErB,EAAKZ,SAAS,CAAEE,a,qIA8BpB,OACI,kBAAC,EAAD,CAAavC,MAAM,YAAYL,WAAYgD,KAAKL,MAAM9D,OAClD,kBAAC,IAAD,CAAK0E,OAAQ,CAAC,GAAI,KACd,kBAAC,IAAD,CAAKlC,KAAM,GACP,kBAAC,IAAD,CAAMhB,MAAM,oBACR,kBAAC,IAAD,CAAMqB,SAAUsB,KAAKhF,cACjB,kBAAC,IAAK2D,KAAN,CAAW1C,KAAK,OAAO2C,MAAO,CAAC,CAAEC,UAAU,EAAMnB,QAAS,uBACtD,kBAAC,IAAD,CAAOoB,YAAY,YAGvB,kBAAC,IAAKH,KAAN,CAAW1C,KAAK,OAAO2C,MAAO,CAAC,CAAEC,UAAU,EAAMnB,QAAS,uBACtD,kBAAC,IAAD,CAAOoB,YAAY,eAGvB,kBAAC,IAAKH,KAAN,KACI,kBAAC,IAAD,CAAQzC,KAAK,UAAUiD,SAAS,UAAhC,gBAQhB,kBAAC,IAAD,CAAMd,KAAM,IACR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMmC,WAAW,aACbC,WAAYT,KAAKL,MAAMC,MACvBc,WAAY,SAACpB,GAAD,OAAgB,kBAAC,IAAKX,KAAN,KACxB,kBAAC,IAAKA,KAAKgC,KAAX,CACIC,OAAQ,kBAAC,IAAD,CAAQC,IAAI,qEACpBxD,MAAOiC,EAAKrD,KACZ6E,YAAaxB,EAAKgB,aAOtC,kBAAC,IAAD,CAAKjC,KAAM,GACP,kBAAC,IAAD,CAAMhB,MAAM,YAKpB,6BAEA,kBAAC,IAAD,CAAQnB,KAAK,UAAUvB,QAAS,WAAQV,EAASW,OAAOC,YAAxD,c,GA/FGkG,a,SCSJC,EAXM,SAAC,GAA4C,IAA/BC,EAA8B,EAAzCC,UAA8BC,EAAW,6BACrDzE,EAAgB0B,qBAAWhC,GAA3BM,YAER,OAAO,kBAAC,IAAD,iBACCyE,EADD,CAEHC,OAAQ,SAAAC,GAAU,OAAM3E,EACjB,kBAACuE,EAAmBI,GACrB,kBAAC,IAAD,CAAUlF,GAAG,gBCkBZmF,MAbf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIN,UAAWxG,IACjC,kBAAC,IAAD,CAAO6G,OAAK,EAACC,KAAK,SAASN,UAAWtD,IACtC,kBAAC,IAAD,CAAO2D,OAAK,EAACC,KAAK,UAAUN,UAAWO,IACvC,kBAAC,EAAD,CAAcF,OAAK,EAACC,KAAK,SAASN,UAAW9B,OCXjCsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASX,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpE,MAAK,SAAAqE,GACJA,EAAaC,gBAEdpE,OAAM,SAAAqE,GACL9G,QAAQ8G,MAAMA,EAAM7E,c","file":"static/js/main.84855f1c.chunk.js","sourcesContent":["import * as firebase from 'firebase/app'\r\nimport \"firebase/auth\"\r\nimport \"firebase/database\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCiWX7XS7bywENkJKxyzKa9BkKTWV3Xsic\",\r\n    authDomain: \"prueba-hindra.firebaseapp.com\",\r\n    databaseURL: \"https://prueba-hindra.firebaseio.com\",\r\n    projectId: \"prueba-hindra\",\r\n    storageBucket: \"prueba-hindra.appspot.com\",\r\n    messagingSenderId: \"833531295878\",\r\n    appId: \"1:833531295878:web:2dcfccd0488e09bec2b907\"\r\n};\r\n\r\nconst Firebase = firebase.initializeApp(firebaseConfig)\r\nexport default Firebase","import React from 'react'\r\nimport Firebase from '../infrastructure/Firebase'\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n            <button onClick={() => { Firebase.auth().signOut() }}>Salir</button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Home","import React, { useCallback } from 'react'\r\nimport { withRouter } from 'react-router'\r\nimport Firebase from '../infrastructure/Firebase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SignUp = (props:any) => {\r\n    const handleSubmit = useCallback(async ev => {\r\n        ev.preventDefault();\r\n        const { email, password } = ev.target.elements;\r\n        console.log(email, password)\r\n        try {\r\n            await Firebase.auth().createUserWithEmailAndPassword(email.value, password.value)\r\n            alert(`Se creó el usuario  ${email.value}`);\r\n            props.history.push(\"/login\")\r\n        } catch (err) {\r\n            alert(err)\r\n        }\r\n    }, [props.history])\r\n\r\n    return (\r\n        <div>\r\n            <h1>Registar Usuario</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Usuario o Correo:\r\n                    <input name=\"email\" type=\"text\" />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Contraseña:\r\n                    <input name=\"password\" type=\"password\" />\r\n                </label>\r\n\r\n                <br />\r\n                <button type=\"submit\">\r\n                    Enviar\r\n                </button>\r\n                <Link to=\"/login\">\r\n                    Ingresar\r\n                </Link>\r\n            </form>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default withRouter(SignUp)","import React, { useState, useEffect } from 'react'\r\nimport Firebase from '../infrastructure/Firebase'\r\n\r\nexport const AuthContext = React.createContext({});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState(null)\r\n    useEffect(() => {\r\n        Firebase.auth().onAuthStateChanged(setCurrentUser);\r\n    }, [])\r\n\r\n    return (<AuthContext.Provider\r\n        value={{ currentUser }\r\n        }>\r\n        {children}\r\n    </AuthContext.Provider>)\r\n\r\n}","import React from 'react'\r\nimport { Layout, Typography, Alert } from 'antd';\r\n\r\nconst AppTemplate = (props: any) => {\r\n    const {alertProps} = props\r\n\r\n    return (<Layout>\r\n        <Layout.Header>\r\n            <Typography.Title style={{ color: \"white\" }}>\r\n                {props.title || \"Testing App\"}\r\n            </Typography.Title>\r\n        </Layout.Header>\r\n        <Layout.Content >\r\n            <br />\r\n            {props.children || 'Content'}\r\n        </Layout.Content>\r\n        <Layout.Footer style={{textAlign:\"center\"}}>\r\n            Powered by esbgo97\r\n        </Layout.Footer>\r\n        {alertProps.show ? <Alert type={alertProps.type}  message={alertProps.message} showIcon/>:null}\r\n        \r\n    </Layout>)\r\n}\r\n\r\nexport default AppTemplate","import React, { useCallback, useContext, useState } from 'react'\r\nimport Firebase from '../infrastructure/Firebase';\r\nimport { AuthContext } from '../utils/Auth';\r\nimport { Redirect } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Card, Button, Form, Input, Checkbox, Row, Col } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport AppTemplate from '../ui/partials/AppTemplate';\r\n\r\n\r\nconst Login = (props: any) => {\r\n    const [alertProps, setAlertProps] = useState({ type: \"info\", message: \"\", show: false })\r\n\r\n    const handleSubmit = useCallback(formData => {\r\n        Firebase.auth().signInWithEmailAndPassword(formData.email, formData.password)\r\n        .then(resp => {\r\n            if (resp) {\r\n                setAlertProps({\r\n                    show:true,\r\n                    message:\"Login Success\",\r\n                    type:\"success\"\r\n                })\r\n                props.history.push(\"/posts\")\r\n            }\r\n        }).catch(err => {\r\n            setAlertProps({\r\n                show:true,\r\n                message:err.message,\r\n                type:\"error\"\r\n            })\r\n        })\r\n    }, [props.history])\r\n\r\n    const cont = useContext(AuthContext) as any\r\n\r\n\r\n    if (cont.currentUser) {\r\n        return <Redirect to=\"/posts\" />\r\n    }\r\n    \r\n\r\n    return (\r\n        <AppTemplate alertProps={alertProps}>\r\n            <Row>\r\n                <Col span={12} offset={6} >\r\n                    <Card title=\"Ingreso\" style={{ textAlign: \"center\" }}>\r\n\r\n                        <Form name=\"Login\"\r\n                            className=\"login-form\"\r\n                            initialValues={{ rememberMe: true }}\r\n                            onFinish={handleSubmit}>\r\n                            <Form.Item name=\"email\" rules={[{ required: true, message: \"Ingrese un correo válido\" }]}>\r\n                                <Input placeholder=\"Email\"\r\n                                    prefix={<UserOutlined className=\"site-form-item-icon\" />} />\r\n\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name=\"password\" rules={[{ required: true, message: 'Ingrese una clave' }]} >\r\n                                <Input placeholder=\"Clave\"\r\n                                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                    type=\"password\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name=\"remember\" valuePropName=\"checked\" >\r\n                                <Checkbox>Remember me</Checkbox>\r\n                            </Form.Item>\r\n\r\n\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">Ingresar </Button>\r\n                                <br />\r\n                                <Link to=\"/signup\" >Registrarse</Link>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Card>\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n        </AppTemplate>\r\n\r\n    )\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\nimport Firebase from '../infrastructure/Firebase'\r\nimport AppTemplate from '../ui/partials/AppTemplate';\r\nimport { Row, Col, Button, Card, Form, Input, List, Avatar } from 'antd';\r\nimport { } from '@ant-design/icons'\r\n\r\nclass Post extends Component<any, any> {\r\n    db: any = null;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            posts: [],\r\n            alert: { type: \"info\", message: \"\", show: false }\r\n        }\r\n        this.db = Firebase.database().ref().child('Post');\r\n    }\r\n    async componentDidMount() {\r\n        const posts = this.state.posts\r\n        this.db.on('child_added', (snap: any) => {\r\n            posts.push({\r\n                postsId: snap.key,\r\n                name: snap.val().name,\r\n                text: snap.val().text\r\n            })\r\n            this.setState({ posts })\r\n        })\r\n    }\r\n    handleSubmit = (formData: any) => {\r\n        const post = {\r\n            user: Firebase.auth().currentUser?.uid || \"\",\r\n            ...formData\r\n        };\r\n        this.db.push().set(post).then((resp: any) => {\r\n            this.setState({\r\n                alert: {\r\n                    show: true,\r\n                    type: \"info\",\r\n                    message: \"Adde Posts\"\r\n                }\r\n            })\r\n        }).catch((err: Error) => {\r\n            this.setState({\r\n                alert: {\r\n                    show: true,\r\n                    type: \"error\",\r\n                    message: err.message\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <AppTemplate title=\"Post Page\" alertProps={this.state.alert}>\r\n                <Row gutter={[16, 16]} >\r\n                    <Col span={6}>\r\n                        <Card title=\"Publish new Post\">\r\n                            <Form onFinish={this.handleSubmit}>\r\n                                <Form.Item name=\"name\" rules={[{ required: true, message: \"Ingrese un nombre\" }]}>\r\n                                    <Input placeholder=\"Nombre\" />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item name=\"text\" rules={[{ required: true, message: \"Ingrese un nombre\" }]}>\r\n                                    <Input placeholder=\"Contenido\" />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\" >Publicar</Button>\r\n                                </Form.Item>\r\n\r\n                            </Form>\r\n\r\n                        </Card>\r\n\r\n                    </Col>\r\n                    <Col  span={12}>\r\n                        <Card >\r\n                            <List itemLayout=\"horizontal\"\r\n                                dataSource={this.state.posts}\r\n                                renderItem={(post: any) => (<List.Item>\r\n                                    <List.Item.Meta\r\n                                        avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\r\n                                        title={post.name}\r\n                                        description={post.text}\r\n                                    />\r\n                                </List.Item>)}\r\n                            />\r\n                        </Card>\r\n\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Card title=\"Users\">\r\n\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <br />\r\n\r\n                <Button type=\"primary\" onClick={() => { Firebase.auth().signOut() }}>Salir</Button>\r\n            </AppTemplate>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post","import React, { useContext } from \"react\"\r\nimport { AuthContext } from \"./Auth\"\r\nimport { Route, Redirect } from \"react-router-dom\"\r\n\r\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\r\n    const { currentUser } = useContext(AuthContext)\r\n\r\n    return <Route\r\n        {...rest}\r\n        render={routeProps => !!currentUser\r\n            ? (<RouteComponent {...routeProps} />)\r\n            : <Redirect to=\"/login\" />} />\r\n\r\n}\r\n\r\nexport default PrivateRoute","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\n//Styles\r\nimport './App.css';\r\n\r\n//Pages\r\nimport Home from './pages/Home';\r\nimport SignUp from './pages/SignUp';\r\nimport Login from './pages/Login';\r\nimport Post from './pages/Posts';\r\n\r\n//Utils\r\nimport { AuthProvider } from './utils/Auth';\r\nimport PrivateRoute from './utils/PrivateRoute';\r\n\r\nfunction App() {\r\n  return (\r\n    <AuthProvider>\r\n      <Router>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/login\" component={Login} />\r\n        <Route exact path=\"/signup\" component={SignUp} />\r\n        <PrivateRoute exact path=\"/posts\" component={Post} />\r\n      </Router>\r\n    </AuthProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//Styles\r\nimport './index.css';\r\nimport 'antd/dist/antd.css'; \r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}